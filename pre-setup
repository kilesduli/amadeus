#!/usr/bin/env -S emacs -x
;; -*- mode: emacs-lisp -*-
;;
;; Author: duli kiles <duli4868@gmail.com>
;; Homepage: https://github.com/kilesduli/amadeus
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;; Code:

(setq user-emacs-directory (file-name-directory load-file-name))

;;;; Make all Directory Exists
(defvar xdg-share-dir (expand-file-name (concat "~" user-login-name "/.local/share/")))

(defun ensure-directory-and-symlink (dir link)
  "Ensure DIR exists and create a symbolic LINK pointing to it.
If LINK exists but is not a symlink, it will be deleted first."
  (unless (make-directory dir 'parents)
    (message ":: create %s" dir))
  (unless (file-symlink-p link)
    (when (file-exists-p link)
      (delete-file link))
    (make-symbolic-link dir link)
    (message ":: link %s to %s" dir link))
  (message ":: %s and link %s already created" dir link))


(defvar emacs-straight-dir (concat xdg-share-dir "emacs-straight/"))
(defvar emacs-straight-dir-symbolic-link (concat user-emacs-directory "straight"))
(ensure-directory-and-symlink emacs-straight-dir emacs-straight-dir-symbolic-link)

(defvar amadeus-emacs-dir (concat xdg-share-dir "amadeus"))
(defvar amadeus-emacs-dir-symbolic-link (concat user-emacs-directory "emacs"))
(ensure-directory-and-symlink amadeus-emacs-dir amadeus-emacs-dir-symbolic-link)

(defvar straight-version-lockfile (concat user-emacs-directory "straight.lock.el"))
(defvar straight-version-lockfile-dir (concat emacs-straight-dir "version/"))
(when (file-exists-p straight-version-lockfile)
  (message ":: found straight-version-lockfile: %s" straight-version-lockfile)
  (make-directory straight-version-lockfile-dir 't)
  (delete-file (concat straight-version-lockfile-dir "default.el"))
  (make-symbolic-link straight-version-lockfile (concat straight-version-lockfile-dir "default.el"))
  (message ":: link straight-version-lockfile to %s" (concat emacs-straight-dir-symbolic-link "/version/default.el")))

;;;; Init Packages
(load (concat user-emacs-directory "package.el"))

;;;; Generate amadeus-init-file
(defvar amadeus-init-cached-vars
  '(load-path
    ;; maybe we will use straight-use-package in interactive session
    straight-repository-branch
    straight-use-package-by-default
    straight-build-dir
    straight-vc-git-default-clone-depth)
  "Variable needs keeps in interactive session.")

(defun amadeus-init--generate-vars ()
  `(defun amadeus--generate-vars ()
     ,@(cl-loop  for var in amadeus-init-cached-vars
                 if (boundp var)
                 collect `(set-default ',var ',(symbol-value var)))))

(setq amadeus-init-file (locate-user-emacs-file "amadeus-init.el"))
(let (amadeus-init)
  (push (amadeus-init--generate-vars) amadeus-init)
  (message ":: create %s success" 'amadeus-init--generate-vars)
  (setq amadeus-init (nreverse amadeus-init))
  (with-temp-file amadeus-init-file
    (elisp-enable-lexical-binding)
    (end-of-line)
    (newline)
    (cl-loop for var in amadeus-init
             do (prin1 var (current-buffer))))
  (message ":: %s generated" amadeus-init-file))
