#!/usr/bin/env -S emacs -x
;; -*- mode: emacs-lisp -*-
;;
;; Author: duli kiles <duli4868@gmail.com>
;; Homepage: https://github.com/kilesduli/amadeus
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;; Code:
(require 'cl-lib)
(setq user-emacs-directory (file-name-directory load-file-name))
(defvar amadeus-user-init-file (locate-user-emacs-file "init.el"))

;;;; Make all Directory Exists
(defvar xdg-share-dir (expand-file-name (concat "~" user-login-name "/.local/share/")))

(defun ensure-directory-and-symlink (dir link)
  "Ensure DIR exists and create a symbolic LINK pointing to it.
If LINK exists but is not a symlink, it will be deleted first."
  (unless (make-directory dir 'parents)
    (message ":: create %s" dir))
  (unless (file-symlink-p link)
    (when (file-exists-p link)
      (delete-file link))
    (make-symbolic-link dir link)
    (message ":: link %s to %s" dir link))
  (message ":: %s and link %s already created" dir link))


(defvar emacs-straight-dir (concat xdg-share-dir "emacs-straight/"))
(defvar emacs-straight-dir-symbolic-link (concat user-emacs-directory "straight"))
(ensure-directory-and-symlink emacs-straight-dir emacs-straight-dir-symbolic-link)

(defvar amadeus-emacs-dir (concat xdg-share-dir "amadeus"))
(defvar amadeus-emacs-dir-symbolic-link (concat user-emacs-directory "emacs"))
(ensure-directory-and-symlink amadeus-emacs-dir amadeus-emacs-dir-symbolic-link)

(defvar straight-version-lockfile (concat user-emacs-directory "straight.lock.el"))
(defvar straight-version-lockfile-dir (concat emacs-straight-dir "version/"))
(when (file-exists-p straight-version-lockfile)
  (message ":: found straight-version-lockfile: %s" straight-version-lockfile)
  (make-directory straight-version-lockfile-dir 't)
  (delete-file (concat straight-version-lockfile-dir "default.el"))
  (make-symbolic-link straight-version-lockfile (concat straight-version-lockfile-dir "default.el"))
  (message ":: link straight-version-lockfile to %s" (concat emacs-straight-dir-symbolic-link "/version/default.el")))

;;;; Bootstrap and straight and install packages.
;; emacs script do not load early-init.el, we still disable it.
(setq package-enable-at-startup nil)
(setq straight-repository-branch "develop"
      ;; We do not use use-package
      straight-use-package-by-default nil
      ;; Separate from other builds
      straight-build-dir (format "amadeus-build-%s" emacs-version)
      ;; just depth 1
      straight-vc-git-default-clone-depth '(1 single-branch))

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(cl-defmacro package! (package &key recipe)
  "Declare all packages and use `straight-use-package'."
  (declare (indent defun))
  `(straight-use-package
    ,(if recipe
         `(quote ,(cons package recipe))
       `(quote ,package))))

(load (concat user-emacs-directory "package.el"))
;; dash install after load package.el
(require 'dash)
;;;; Generate amadeus-init-file
(setq amadeus-init-file (locate-user-emacs-file (format "amadeus-init.%s.el" emacs-version)))
(defvar amadeus--init nil)

(defvar amadeus-init-generators
  '((amadeus-init--generate-vars               amadeus--startup-vars)
    (amadeus-init--generate-loaddefs-amadeus   amadeus--startup-loaddefs-amadeus)
    (amadeus-init--generate-loaddefs-packages  amadeus--startup-loaddefs-packages)
    (amadeus-init--generate-load-modules       amadeus--startup-modules)))

(defvar amadeus-init-cached-vars
  '(load-path
    ;; maybe we will use straight-use-package in interactive session
    straight-repository-branch
    straight-use-package-by-default
    straight-build-dir
    straight-vc-git-default-clone-depth)
  "Variable needs keeps in interactive session.")

(defun amadeus-init--generate-vars ()
  `(defun amadeus--startup-vars ()
     ,@(cl-loop for var in amadeus-init-cached-vars
                if (boundp var)
                collect `(set-default ',var ',(symbol-value var)))))

(defun amadeus-init--extract-setup-use-forms (file)
  "Extract all `:use` values from `setup` forms in FILE."
  (with-temp-buffer
    (insert-file-contents file)
    (cl-loop with result = nil
             for form = (condition-case nil (read (current-buffer)) (end-of-file :eof))
             until (eq form :eof)
             when (and (listp form) (eq (car form) 'setup))
             do (cl-loop for arg on (cdr form)
                         while (and (consp (car arg)) (eq (caar arg) :use))
                         do (setq result (append (cdar arg) result)))
             finally return (delete-dups result))))

(defun amadeus-init--extract-autoload-packages (packages)
  "Retrieve the dependencies of the specified packages and return a merged list."
  (let* ((straight-packages (hash-table-keys straight--build-cache)))
    (--> (mapcar #'straight-dependencies packages)
         (flatten-list it)
         (delete-dups it)
         (cl-remove-if-not
          (lambda (x) (member x straight-packages))
          it)
         (append packages it)
         (delete-dups it))))

(defun amadeus-init--autoloads-cleanup-form (form)
  "Remove `provide' form and already cached vars etc. in autoload.

Copy from doom, and remove unnecessary check."
  (let ((func (car-safe form)))
    (cond ((memq func '(provide custom-autoload register-definition-prefixes))
           nil)
          ((and (eq func 'add-to-list)
                ;; FIXME:
                (memq (cadr form)
                      amadeus-init-cached-vars))
           nil)
          (form))))

(defun amadeus-init--autoloads-scan (files)
  "Grab autoload contents from file.

Copy from doom, and remove some logic."
  (let (autoloads)
    (dolist (file files (nreverse (delq nil autoloads)))
      (if (file-readable-p file)
          (with-temp-buffer
            (let (subautoloads)
              (insert-file-contents file)
              (save-excursion
                ;; Fixup the special #$ reader form and throw away comments.
                (while (re-search-forward "#\\$\\|^;\\(.*\n\\)" nil 'move)
                  (unless (ppss-string-terminator (save-match-data (syntax-ppss)))
                    (replace-match (if (match-end 1) "" file) t t))))
              (condition-case _
                  (while t
                    (push (amadeus-init--autoloads-cleanup-form (read (current-buffer)))
                          subautoloads))
                (end-of-file))
              (when (delq nil subautoloads)
                (push `(let* ((load-file-name ,file)
                              (load-true-file-name load-file-name))
                         ,@(nreverse subautoloads))
                      autoloads))))))))

(defun amadeus-init--generate-loaddefs-packages ()
  `(defun amadeus--startup-loaddefs-packages ()
     ,@(amadeus-init--autoloads-scan
        (let (packages)
          (setq packages
                (--> (amadeus-init--extract-setup-use-forms amadeus-user-init-file)
                     (mapcar #'symbol-name it)
                     (amadeus-init--extract-autoload-packages it)
                     (mapcar #'straight--autoloads-file it)))))))

(defun amadeus-init--generate-init-file ()
  (pcase-dolist (`(,genfn ,initfn) amadeus-init-generators)
    (when (fboundp genfn)
      (push (funcall genfn) amadeus--init)
      (message ":: create %s success" initfn)))
  (push `(defun amadeus-startup ()
           ,@(cl-loop for (genfn initfn) in amadeus-init-generators
                      if (fboundp genfn)
                      collect (list initfn)))
        amadeus--init)
  (setq amadeus--init (nreverse amadeus--init))
  (with-temp-file amadeus-init-file
    (insert ";; -*- coding: utf-8; lexical-binding: t; -*-\n"
            ";; This file was autogenerated; do not edit it by hand!\n")
    (goto-char (point-max))
    (cl-loop for var in amadeus--init
             do (prin1 var (current-buffer))))
  (message ":: %s generated" amadeus-init-file))

(amadeus-init--generate-init-file)
